############### Board representation ##############
board<-list(
  dim=c(10,10),
  ladders=c(1,38,4,14,9,31,21,42,28,84,36,44,51,67,71,91,80,100),
  chutes=c(16,6,47,26,49,11,56,53,62,19,64,60,87,24,93,73,95,75,98,78)
)
##################Plot of Game board######################
show_board<-function(board){
  size<-board$dim[1]*board$dim[2]
  pool<-matrix(data='NULL',nrow=board$dim[1],ncol=board$dim[2],byrow = TRUE)
  rawpool<-matrix(data=c(1:size),nrow=board$dim[1],ncol=board$dim[2],byrow = TRUE)
  
  mrow<-board$dim[1]
  mcol<-board$dim[2]
  
  plot.new()
  plot.window(xlim = c(0, mcol), ylim = c(0,mrow), asp = 1) 
  for(r in 0:mrow){
    segments(x0 = 0, y0 = r, x1 = mcol, y1 = r) }
  for(c in 0:mcol){
    segments(x0 = c, y0 = 0, x1 = c, y1 = mrow)
  }
  
  for (i in 1:mrow) {
    if (!i %% 2 == 0) {
      for (j in 1:mcol) {
        pool[i,j]=rawpool[i,j]
      }
    }
  }
  
  for (i in 1:mrow) {
    if (i %% 2 == 0) {
      for (k in 1:mcol) {
        pool[i,k]=rawpool[i,mcol+1-k]
      }
    }
  }
  
  for (i in 1:mrow) {
    for (j in 1:mcol) {
      text(j-0.5,i-0.5,pool[i,j])
    }
  }
  #########################DRAW ARROWS##############################
  if(is.null(board$ladders)){
    lad_num=0
  }else
  {
    lad_num<-length(board$ladders)/2 #number of ladder arrows
    ladders<-matrix(board$ladders,nrow=length(board$ladders)/2,ncol=2,byrow = TRUE)
    for (i in 1:lad_num) {
      startcoord<-which(pool==ladders[i,1],arr.ind=TRUE)
      endcoord<-which(pool==ladders[i,2],arr.ind=TRUE)
      arrows(startcoord[1,2]-0.5,startcoord[1,1]-0.5,endcoord[1,2]-0.5,endcoord[1,1]-0.5,col="green",lwd=2)
    }
  }
  if(is.null(board$chutes)){
    chu_num=0
  }else
  {
    chu_num<-length(board$chutes)/2
    chutes<-matrix(board$chutes,nrow=length(board$chutes)/2,ncol=2,byrow = TRUE)
    for (i in 1:chu_num) {
      startcoord<-which(pool==chutes[i,1],arr.ind=TRUE)
      endcoord<-which(pool==chutes[i,2],arr.ind=TRUE)
      arrows(startcoord[1,2]-0.5,startcoord[1,1]-0.5,endcoord[1,2]-0.5,endcoord[1,1]-0.5,col="red",lwd=2)
    }
  }
}
#############################PLAY GAME###################################
play_solo<-function(board, verbose=TRUE){
  
  ladders<-matrix(board$ladders,nrow=9,ncol=2,byrow = TRUE)
  chutes<-matrix(board$chutes,nrow=10,ncol=2,byrow = TRUE)
  ladder_tally<-matrix(0 ,nrow =1 ,ncol=9, byrow = TRUE)
  chute_tally<-matrix(0 ,nrow = 1 ,ncol=10, byrow = TRUE)
  
  position<-0
  turns<-0
  move_log<-c()
  
  while(position<100){
    turns<-turns+1
    if(verbose) cat("Turn",turns,"\n")
    if(verbose) cat("Start at",position,"\n")
    
    roll<-sample(6,1)
    if(verbose) cat("Spinner:",roll,"\n")  
    
    if(position+roll>100){
      move_log<-c(move_log,position)
      next
    }
    position=position+roll
    
    if(position %in% ladders[,1]){
      if(verbose) cat("Landed on:",position,"\n") 
      ladderto<-which(ladders==position,arr.ind=TRUE)
      ladder_tally[ladderto[1,1]]<-ladder_tally[ladderto[1,1]] + 1
      position= ladders[ladderto[1,1],2]
      if(verbose) cat("Ladder!","\n") 
      if(verbose) cat("Turn ends at:",position,"\n")  
      move_log<-c(move_log,position)
    }else
      if(position %in% chutes[,1]){
        if(verbose) cat("Landed on:",position,"\n") 
        chuteto<-which(chutes==position,arr.ind=TRUE)
        chute_tally[chuteto[1,1]]<-chute_tally[chuteto[1,1]] + 1
        position = chutes[chuteto[1,1],2]
        if(verbose) cat("Chute!","\n") 
        if(verbose) cat("Turn ends at:",position,"\n") 
        move_log<-c(move_log,position)
      }
    else{
      if(verbose) cat("Turn ends at:",position,"\n")   
      move_log<-c(move_log,position)
    }
    cat(" ","\n")
  }
  
  out<-list("turns"=turns,"chute_tally"=c(chute_tally),"ladder_tally"=c(ladder_tally),"move_log"=move_log)
  out
}
